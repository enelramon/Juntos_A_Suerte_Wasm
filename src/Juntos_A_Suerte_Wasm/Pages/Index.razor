@page "/"
@inject TeamService teamService
@inject PersonService personService
@inject NotificationService notify

<div class="card position-relative">
    <div class="card-header">
        <h5>Version 1.0.3</h5>
        <h2 class="card-title text-center">GRUPOS / GROUP</h2>
    </div>
    <div class="card-body">
        <div class="input-group mb-3">
            <input type="text" @bind="Name" class="form-control" placeholder="Nombre del grupo" aria-label="Recipient's username" aria-describedby="basic-addon2">
            <div class="input-group-append">
                <button class="btn btn-primary" type="button" @onclick="Save">Nuevo</button>
                <button class="btn btn-primary" type="button" @onclick="ShowGroupModal">A&ntilde;adir Grupos</button>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-success rounded-pill" @onclick="ShowPersonModal">
                Add
                <i class="bi bi-person-fill-add"></i>
            </button>

            <button type="button" class="btn btn-success rounded-pill" @onclick="Shuffle">
                <span class="button-text">Sortear</span>
                <i class="bi bi-dice-6-fill"></i>
            </button>
        </div>
        <hr />
        <div class="form-control border-0 d-flex flex-wrap">
            @foreach (var team in Teams)
            {
                <TeamComponent Team="@team" OnTeamDeleted="@Delete"></TeamComponent>
            }
        </div>
    </div>
</div>

@if (isPersonModalVisible)
{
    <!-- The Person Modal -->
    <div class="modal show d-block z-index: 1050" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered" style="z-index: 1060;">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Personas</h2>
                    <button type="button" class="btn-close" @onclick="HidePersonModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <PersonComponent />
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show z-index-1040"></div>
}

@if (isGroupModalVisible)
{
    <!-- The Group Modal -->
    <div class="modal show d-block z-index: 1050" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered" style="z-index: 1060;">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Grupos</h2>
                    <button type="button" class="btn-close" @onclick="HideGroupModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <GroupComponent />
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show z-index-1040"></div>
}

@code
{
    public string Name { get; set; } = "";
    public List<Team> Teams { get; set; } = new List<Team>();
    private bool isPersonModalVisible = false;
    private bool isGroupModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        Teams = await teamService.GetTeamsAsync();
        StateHasChanged();
    }

    public async Task Save()
    {
        if (string.IsNullOrWhiteSpace(Name))
        {
            Name = "Default";
        }
        await teamService.SaveAsync(Name);
        Name = string.Empty;
        await Refresh();
    }

    public async Task Delete(int teamId)
    {
        await teamService.DeleteTeamAsync(teamId);
        await Refresh();
    }

    public async Task Shuffle()
    {
        if (Teams == null || !Teams.Any())
        {
            notify.ShowNotification(title: "Error", message: "Crea los grupos antes de sortear.", NotificationSeverity.Error);
            return;
        }
        var people = await personService.GetPeopleAsync();
        ShuffleService.ShufflePeopleIntoTeams(Teams, people);
        await teamService.SaveTeamsAsync(Teams);
    }

    private void ShowPersonModal()
    {
        isPersonModalVisible = true;
    }

    private void HidePersonModal()
    {
        isPersonModalVisible = false;
    }

    private void ShowGroupModal()
    {
        isGroupModalVisible = true;
    }
    private async Task HideGroupModal()
    {
        isGroupModalVisible = false;
        await Refresh();
    }
}
